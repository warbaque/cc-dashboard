loadTable = function(name)
  local file = fs.open(name, "r")
  local data = file.readAll()
  file.close()
  return textutils.unserialize(data)
end

monitor_init = function()
  monitor.setTextScale(0.5)
  monitor.setTextColor(colors.white)
  monitor.setBackgroundColor(colors.black)
  monitor.clear()

  width, height = monitor.getSize()
  columns = math.max(math.floor(width / 36), 1)
  width = math.floor(width / columns)

  bg = {
    string.rep("7", width-2),
    string.rep("f", width-2),
  }
  fmt = "%-" .. width-2-21 .. "s %10s %9s"
end

error = function(msg)
  print(msg)
  monitor.setTextScale(0.5)
  monitor.setTextColor(colors.white)
  monitor.setBackgroundColor(colors.red)
  monitor.setCursorPos(2, math.floor(height/2))
  monitor.clear()
  monitor.write("ERROR")
end

Clock = { t0 = os.clock() }
function Clock:ticks()
  local t1 = os.clock()
  local dt = math.max(t1 - self.t0, 0.05)
  self.t0 = t1
  return math.floor(dt/0.05+0.5)
end

----------------

storages = {}
monitor = nil

peripherals_init = function()
  storages = {}
  item_getters = function(ty, fn)
    for _, storage in ipairs({ peripheral.find(ty) }) do
      table.insert(storages, { items=storage[fn] })
    end
  end

  item_getters("inventory", "list")
  item_getters("item_storage", "items")
  print("[info] found", #storages, "storages")

  monitor = peripheral.find("monitor")
  if monitor then
    monitor_init()
  end
end

dashboard_items = loadTable("dashboard_items")
dynamic_items ={}
items = {}
avg = {}
N = 1200 -- sample window in ticks (1 minute)
T = 1200 -- display time period in ticks (1 minute)

peripherals_init()

-- [[ INIT ]] --

remove_prefix = function(s, start)
  if string.sub(s, 1, string.len(start)) == start then
    return string.sub(s, string.len(start) +1, -1)
  end
end

update = function()
  local counts = {}
  for _, list in ipairs(dashboard_items) do
    for _, item in ipairs(list.items) do
      counts[item] = 0
    end
  end

  dynamic_items = {}
  for _, storage in ipairs(storages) do
    for k, v in pairs(storage.items() or {}) do
      item = string.gsub(v.name, "%S+:", "")
      if not counts[item] and dashboard_items.dynamic_items then
        table.insert(dynamic_items, item)
      end
      counts[item] = (counts[item] or 0) + v.count
    end
  end

  local ticks = Clock:ticks()
  local n = N/ticks
  for item, count in pairs(counts) do
    avg[item] = (avg[item] or 0) * (n-ticks)/n + (items[item] and count - items[item] or 0) / n
  end
  items = counts
end

setCursor = function(row)
  monitor.setCursorPos(2+width*math.floor((row-1)/(height-2)), 3+(row-1)%(height-2))
end

writeSeparator = function(row, separator)
  setCursor(row)
  monitor.setTextColor(colors.orange)
  monitor.write(separator)
end

writeItems = function(row, list)
  for i, item in ipairs(list) do
    setCursor(row+i)
    monitor.blit(
      string.format(fmt,
        string.sub(item, 0, width-2-21),
        items[item],
        string.format("%s [%5.0f]", avg[item] >= 0 and '+' or '-', math.min(math.abs(T * avg[item]), 99999))
      ),
      string.rep("0", width-2-9) .. (avg[item] >= 0 and 'd' or 'e') .. "00" .. string.rep(avg[item] >= 0 and "3" or "6", 5) .. "0",
      bg[1 + (row+i+1)%2]
    )
  end
end

render = function()
  monitor.clear()

  if width < 36 then
    error(string.format("Monitor width too small: %s < 36", width))
    return
  end

  monitor.setCursorPos(2, 1)
  monitor.setTextColor(colors.magenta)
  monitor.write(string.format(fmt, "ITEM", "COUNT", "i/min "))

  row = 1
  for _, list in ipairs(dashboard_items) do
    empty_rows = (height-2 - (row-1)%(height-2))

    skip_render = true
    for _, item in ipairs(list.items) do
      if items[item] > 0 then
        skip_render = false
      end
    end

    if not skip_render then
      if (empty_rows < 2) or (#list.items+1 < height-2) and (#list.items+1 > empty_rows) then
        row = row + empty_rows
      end

      writeSeparator(row, list.name)
      writeItems(row, list.items)
      row = row + #list.items + 2
    end
  end

  if #dynamic_items > 0 then
    if row > 1 and dashboard_items.dynamic_items then
      writeSeparator(row, "[ extra items ]")
    end
    writeItems(row, dynamic_items)
  end
end

events = function()
  while true do
    local event, _ = os.pullEvent()
    if event == "peripheral" or event == "peripheral_detach" then
      peripherals_init()
    elseif event == "monitor_resize" then
      monitor_init()
    end
  end
end

main = function()
  while true do
    update()
    if monitor then
      render()
    end
    if #storages == 0 then
      sleep(0)
    end
  end
end

parallel.waitForAll(main, events)
